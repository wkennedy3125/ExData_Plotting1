}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
# If I then run in R
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(3)
f
g
install.packages(c("RCurl", "swirl"))
install.packages(c("class", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
mapply(rep, 1:4, 4:1)
library(datasets)
data(iris)
names(iris)
head(iris)
mean(iris$Sepal.Length)
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris[,1:4],2,mean)
numrow(iris)
numrows(iris)
nrows(iris)
nrow(iris)
?apply
dim(iris)
class(iris)
data(mtcars)
?mtcars
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
debug(ls)
ls()
quit
q
x <- with(mtcars, tapply(mpg, cyl, mean))
x
dim(x)
x$4 - x$8
class(x)
x[1,1] - x[1,3]
x[1]
x[1] - x[3]
printmessage2 <- function(x) { if (is.na(x))
print("x is a missing value!") else if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero") invisible(x)
}
x <- log(-1)
printmessage2 <- function(x) {
if (is.na(x))
print("x is a missing value!")
else if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero") invisible(x)
}
printmessage2 <- function(x) {
if (is.na(x))
print("x is a missing value!")
else if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage2(x)
printmessage2 <- function(x) {
if (is.na(x))
print("x is a missing value!")
else if (x > 0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
#invisible(x)
}
x <- log(-1)
printmessage2(x)
data(iris)
head(iris)
with(iris,tapply(Sepal.Length,Species,mean))
apply(iris[,1:4],2,mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
data(mtcars)
head(mtcars)
x <- with(mtcars, tapply(hp, cyl, mean))
x
x[3] - x[1]
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- .5 + 2*x + e
summary(y)
plot(x,y)
?binom
?rbinom
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v1 <- rep(1,1000)
makeVector(v1)
makeVector$set(v1)
set(v1)
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
install_from_swirl("R Programming")
install_course_zip("/Users/adakemia/Documents/Academic/CourseraIntro2R/Swirl/swirl_courses-master.zip", multi=TRUE,
which_course="R Programming")
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_course_zip("/Users/adakemia/Documents/Academic/CourseraIntro2R/Swirl/swirl_courses-master.zip", multi=TRUE, which_course="Getting and Cleaning Data")
install_course_zip("/Users/adakemia/Documents/Academic/CourseraIntro2R/Swirl/swirl_courses-master.zip", multi=TRUE, which_course="Getting and Cleaning Data")
library(ggplot2)
install.packages(c("car", "codetools", "formatR", "httr", "labeling", "markdown", "MASS", "mgcv", "semPlot", "survey", "swirl"))
install.packages(c("codetools", "MASS", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(rootNode,xmlValue)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
?count
length(xpathSApply(rootNode,"//zipcode",xmlValue) == "21231")
xpathSApply(rootNode,"//zipcode",xmlValue) == "21231"
sum(xpathSApply(rootNode,"//zipcode",xmlValue) == "21231")
library(data.table)
install.packages("data.table")
library(data.table)
?fread
dat <- fread("../house_power_consumption.txt",nrows=100)
setwd("/Users/adakemia/Documents/Academic/Coursera/DataScienceSpecialization/04ExploratoryDataAnalysis/Project1/ExData_Plotting1")
dat <- fread("../house_power_consumption.txt",nrows=100)
dat <- fread("../household_power_consumption.txt",nrows=100)
dat
dat <- fread("../household_power_consumption.txt",nrows=1000)
dat
dat[2:100,]
dat[100:200,]
tail(dat,100)
dat[201:300,]
dat <- fread("../household_power_consumption.txt",nrows=1000,na.strings="?")
dat[301:400,]
dat[2:100,]
tail(dat,100)
rm(list=ls())
setwd("/Users/adakemia/Documents/Academic/Coursera/DataScienceSpecialization/04ExploratoryDataAnalysis/Project1/ExData_Plotting1")
check_dat <- read.table("../household_power_consumption.txt",
header=TRUE,sep=';',nrows=100)
classes <- sapply(check_dat,class)
library(data.table)
dat_tmp <- fread("../household_power_consumption.txt",
nrows=1000,na.strings="?",stringsAsFactors=FALSE)
dat <- dat_tmp[which(dat_tmp[,1]=="02/01/2007" || dat_tmp[,1]=="02/02/2007"),]
head(dat)
install.packages(RMySQL)
install.packages(DBI)
install.packages(DBI, type="source")
install.packages("DBI")
install.packages("RMySQL")
install.packages("RMySQL", type="source")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type="source")
